/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/raffle/authentication-key': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /**
     * 인증키 변경
     * @description 기존 인증키를 검증하고 새로운 인증키로 변경합니다.
     */
    put: operations['updateAuthenticationKey'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/apply-all-test-members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 모든 테스트 회원 매칭 신청
     * @description 생성된 모든 테스트 회원들이 매칭에 신청합니다.
     */
    post: operations['applyAllTestMembers'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/raffle/applicants': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 신청자 등록
     * @description 신청자의 이름과 학번, 인증키를 입력받아 신청자를 등록합니다.
     */
    post: operations['saveApplicant'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/me/profile': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 온보딩 (추가 정보 입력)
     * @description 소셜 로그인으로 가입된 사용자가 추가 정보(성별, 전화번호)를 입력하여 가입을 완료합니다. **인증 토큰이 필요합니다.**전화번호 허용 형식: "010-1234-5678", "010 1234 5678", "01012345678"인스타그램 Id 선택 사항
     */
    post: operations['completeOnboarding'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/matches/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 매칭 결과 조회
     * @description 오늘의 매칭 결과를 조회합니다. 매칭 성공 시 내 정보와 파트너 정보를 반환합니다.
     */
    get: operations['getMatchingResult'];
    put?: never;
    /**
     * 매칭 신청
     * @description 매칭 신청을 합니다. 인스타그램 ID는 선택사항입니다.
     */
    post: operations['applyMatching'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/foundItem/create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 분실물 등록
     * @description 습득한 분실물의 정보를 등록합니다. 이미지는 사전에 업로드하고 해당 URL을 포함해야 합니다.
     */
    post: operations['createFoundItem'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['refreshToken'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/token/{memberId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 테스트용 토큰 발급
     * @description memberId를 받아서 해당 회원의 JWT 토큰을 발급합니다. (테스트 전용)
     */
    get: operations['issueTestToken'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/public': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 공개 접근 테스트
     * @description 인증 없이 접근 가능한 엔드포인트
     */
    get: operations['testPublicAccess'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 현재 사용자 정보 조회
     * @description 현재 JWT 토큰의 사용자 정보를 조회합니다.
     */
    get: operations['getCurrentUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/test-members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 테스트 회원 목록 조회
     * @description 생성된 테스트 회원들의 목록을 조회합니다.
     */
    get: operations['getTestMembers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/start': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 수동 매칭 실행
     * @description 스케줄러와 별개로 매칭을 수동으로 실행합니다. 관리자 권한이 필요합니다.
     */
    get: operations['manualMatching'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/create-test-members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 테스트 회원 데이터 생성
     * @description 매칭 테스트를 위한 남성/여성 회원 데이터를 생성합니다.
     */
    get: operations['createTestMembers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/cleanup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 수동 매칭 데이터 정리
     * @description 당일 매칭 데이터를 수동으로 정리합니다. 관리자 권한이 필요합니다.
     */
    get: operations['manualCleanup'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/auth': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * JWT 인증 테스트
     * @description JWT 토큰이 올바르게 인증되는지 테스트합니다. Bearer 토큰이 필요합니다.
     */
    get: operations['testAuth'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/raffle/prizes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 상품 목록 조회
     * @description 등록된 상품의 목록을 조회합니다.
     */
    get: operations['getPrizes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/raffle/prizes/{prizeId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 상품 조회
     * @description 상품 ID로 특정 상품의 정보를 조회합니다.
     */
    get: operations['getPrizeById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/foundItem/upload-url': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 이미지 업로드 URL 조회
     * @description 클라이언트가 S3에 직접 이미지를 업로드하기 위한 Presigned URL을 생성합니다.
     */
    get: operations['getUploadUrl'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/{boothName}/menus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getMenusByBoothName'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/performance': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getPerformances'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/performance/{performanceTitle}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getPerformanceByTitle'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/booth': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getBooths'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/booth/{boothName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['getBoothDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    UpdateAuthenticationKeyRequest: {
      newKey: string;
      oldKey: string;
    };
    BaseResponseVoid: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: unknown;
    };
    BaseResponseString: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: string;
    };
    ApplicantRegistrationRequest: {
      applicantName: string;
      studentId: string;
      key: string;
    };
    MemberOnboardingRequest: {
      /** @enum {string} */
      gender: 'MALE' | 'FEMALE';
      phoneNumber: string;
      instagramId?: string;
    };
    MatchingRequest: {
      instagramId?: string;
    };
    FoundItemRequest: {
      title?: string;
      area?: string;
      /** Format: date-time */
      foundDateTime?: string;
      imagePath?: string;
    };
    RefreshTokenRequest: {
      refreshToken?: string;
    };
    BaseResponseTokenResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['TokenResponse'];
    };
    TokenResponse: {
      accessToken?: string;
      refreshToken?: string;
    };
    BaseResponseUserInfoResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['UserInfoResponse'];
    };
    UserInfoResponse: {
      /** Format: int64 */
      memberId?: number;
      username?: string;
      role?: string;
      authenticated?: boolean;
    };
    BaseResponseListString: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: string[];
    };
    AuthTestResponse: {
      /** Format: int64 */
      memberId?: number;
      username?: string;
      authorities?: string;
      message?: string;
    };
    BaseResponseAuthTestResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['AuthTestResponse'];
    };
    BaseResponseListPrizeResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['PrizeResponse'][];
    };
    PrizeResponse: {
      /** Format: int64 */
      prizeId?: number;
      prizeImagePath?: string;
      prizeName?: string;
    };
    BaseResponsePrizeResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['PrizeResponse'];
    };
    BaseResponseMatchingResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['MatchingResponse'];
    };
    MatchingResponse: {
      myInfo?: components['schemas']['MemberInfo'];
      partnerInfo?: components['schemas']['MemberInfo'];
      matchingDate?: string;
    };
    MemberInfo: {
      phoneNumber?: string;
      instagramId?: string;
    };
    BaseResponseListMenuResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['MenuResponse'][];
    };
    MenuResponse: {
      type?: string;
      name?: string;
      introduction?: string;
      imagePath?: string;
      /** Format: int32 */
      price?: number;
    };
    Pageable: {
      /** Format: int32 */
      page?: number;
      /** Format: int32 */
      size?: number;
      sort?: string[];
    };
    BaseResponseObject: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: unknown;
    };
    BaseResponsePerformanceDetailResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['PerformanceDetailResponse'];
    };
    PerformanceDetailResponse: {
      title?: string;
      artist?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      area?: string;
      imagePath?: string;
      introduction?: string;
      /** Format: int32 */
      day?: number;
      songs?: components['schemas']['SongResponse'][];
    };
    SongResponse: {
      singer?: string;
      title?: string;
    };
    BaseResponseBoothDetailResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['BoothDetailResponse'];
    };
    BoothDetailResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      type?: string;
      department?: string;
      /** Format: date-time */
      operatingStart?: string;
      /** Format: date-time */
      operatingEnd?: string;
      location?: string;
      info?: string;
      imagePath?: string;
      locationImagePath?: string;
      menus?: components['schemas']['MenuResponse'][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  updateAuthenticationKey: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 인증키 변경 요청 정보 */
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAuthenticationKeyRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  applyAllTestMembers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  saveApplicant: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 신청자 등록 요청 정보 */
    requestBody: {
      content: {
        'application/json': components['schemas']['ApplicantRegistrationRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  completeOnboarding: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 추가 입력 정보 */
    requestBody: {
      content: {
        'application/json': components['schemas']['MemberOnboardingRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  getMatchingResult: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseMatchingResponse'];
        };
      };
    };
  };
  applyMatching: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 매칭 신청 요청 정보 */
    requestBody: {
      content: {
        'application/json': components['schemas']['MatchingRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  createFoundItem: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 분실물 등록 요청 정보 */
    requestBody: {
      content: {
        'application/json': components['schemas']['FoundItemRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['RefreshTokenRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseTokenResponse'];
        };
      };
    };
  };
  issueTestToken: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        memberId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  testPublicAccess: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  getCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseUserInfoResponse'];
        };
      };
    };
  };
  getTestMembers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseListString'];
        };
      };
    };
  };
  manualMatching: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  createTestMembers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  manualCleanup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  testAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseAuthTestResponse'];
        };
      };
    };
  };
  getPrizes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseListPrizeResponse'];
        };
      };
    };
  };
  getPrizeById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 상품의 ID
         * @example 1
         */
        prizeId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponsePrizeResponse'];
        };
      };
    };
  };
  getUploadUrl: {
    parameters: {
      query: {
        /**
         * @description 업로드할 이미지 파일명 (확장자 포함)
         * @example lost-wallet.jpg
         */
        fileName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  getMenusByBoothName: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        boothName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseListMenuResponse'];
        };
      };
    };
  };
  getPerformances: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseObject'];
        };
      };
    };
  };
  getPerformanceByTitle: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        performanceTitle: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponsePerformanceDetailResponse'];
        };
      };
    };
  };
  getBooths: {
    parameters: {
      query: {
        pageable: components['schemas']['Pageable'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseObject'];
        };
      };
    };
  };
  getBoothDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        boothName: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseBoothDetailResponse'];
        };
      };
    };
  };
}

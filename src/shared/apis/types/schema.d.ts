/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/test/matching/apply-all-test-members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 모든 테스트 회원 매칭 신청
     * @description 생성된 모든 테스트 회원들이 매칭에 신청합니다.
     */
    post: operations['applyAllTestMembers'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/matching': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 매칭 신청
     * @description 매칭 신청을 합니다. 별도의 추가 정보 없이 신청만 처리됩니다.
     */
    post: operations['applyMatching'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/matching/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 내 소개팅 정보 조회
     * @description 사용자가 번호팅 페이지(응모)에 진입할 때 이 API를 호출 인스타 id, 전화 번호를 기존에 저장된 정보를 불러와서 화면에 채워 넣는다.
     *     **인증 토큰이 필요합니다.**
     */
    get: operations['getProfile'];
    put?: never;
    /**
     * 내 소개팅 정보 생성
     * @description 처음 소셜 로그인을 한다고 해서 소개팅 정보를 저장할 수 있는 것이 아님. 해당 api를 통해 소개팅 회원가입을 해야 함.
     *     추가정보 불필요 토큰만 필요
     */
    post: operations['createProfile'];
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 정보 저장 (추가 정보 입력)
     * @description Get를 통해 얻은 정보중의 사용자가 추가 정보 혹은 기존의 정보에서 변경하고 싶은 정보를 입력하여, 요청하면 소개팅 정보가 수정된다.**인증 토큰이 필요합니다.**
     *     성별 (필수): db에 성별이 없으면 실패전화번호 허용 형식: "010-1234-5678"인스타그램 Id 선택 사항
     */
    patch: operations['patchProfile'];
    trace?: never;
  };
  '/api/auth/refresh': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 액세스 토큰 갱신
     * @description 리프레시 토큰을 Authorization 헤더에 담아서 새로운 액세스 토큰을 발급받습니다.
     */
    post: operations['refreshToken'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/seed/performances': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** [백엔드 용] 공연 seed api */
    post: operations['insertPerformances'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/seed/booths': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** [백엔드 용] 부스 seed api */
    post: operations['insertBooths'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/raffle/{day}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 관리자 일차별 당첨자 조회
     * @description 관리자(학생회)가 일별 추첨 후에 당첨자를 조회하는 api | day은 1~3
     */
    get: operations['getRaffleWinnersByDay'];
    put?: never;
    /**
     * 관리자 일차별 추첨 실행
     * @description 관리자(학생회)가 일별 추첨을 진행하는 api | day은 1~3
     */
    post: operations['executeRaffleByDay'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/raffle/premium': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 관리자 프리미엄 당첨자 조회
     * @description 관리자(학생회)가 프리미엄 추첨 후에 당첨자를 조회하는 api
     */
    get: operations['getRaffleWinnerOfPremium'];
    put?: never;
    /**
     * 관리자 프리미엄 추첨 실행
     * @description 관리자(학생회)가 프리미엄 추첨을 진행하는 api
     */
    post: operations['executeRaffleOfPremium'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 관리자 로그인
     * @description 분실물 관리자 계정으로 로그인하여 JWT 토큰을 발급받습니다.
     */
    post: operations['login'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/found-item': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * 분실물 등록
     * @description 습득한 분실물의 정보를 등록합니다. 이미지는 사전에 업로드하고 해당 URL을 포함해야 합니다. **관리자 권한이 필요합니다.**
     */
    post: operations['createFoundItem'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/member/level-up': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 사용자 레벨업 신청
     * @description 부스를 돌고 학생회를 찾아가서 본인에 맞는 레벨의 인증키를 발급 받고올바른 인증키와 학번, 이름과 본인이 될 레벨을 함께 입력하면 성공인증키 레벨과 요청하는 레벨이 다르면 실패
     */
    patch: operations['levelUp'];
    trace?: never;
  };
  '/api/admin/raffle/authentication-key': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 관리자 인증키 조회
     * @description 관리자(학생회)가 인증키 레벨 설정 후 학생에게 인증키를 보여줄때 사용하는 api
     */
    get: operations['getAuthenticationKey'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * 관리자 인증키 레벨 설정
     * @description 관리자(학생회)가 인증키 레벨 설정 - 학생이 인증키 입력 후 레벨 비교를 위해 필요
     */
    patch: operations['setAuthenticationKeyLevel'];
    trace?: never;
  };
  '/api/test/token/{memberId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 테스트용 토큰 발급
     * @description memberId를 받아서 해당 회원의 JWT 토큰을 발급합니다. (테스트 전용)
     */
    get: operations['issueTestToken'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/public': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 공개 접근 테스트
     * @description 인증 없이 접근 가능한 엔드포인트
     */
    get: operations['testPublicAccess'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 현재 사용자 정보 조회
     * @description 현재 JWT 토큰의 사용자 정보를 조회합니다.
     */
    get: operations['getCurrentUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/test-members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 테스트 회원 목록 조회
     * @description 생성된 테스트 회원들의 목록을 조회합니다.
     */
    get: operations['getTestMembers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/start': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 수동 매칭 실행
     * @description 스케줄러와 별개로 매칭을 수동으로 실행합니다. 관리자 권한이 필요합니다.
     */
    get: operations['manualMatching'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/create-test-members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 테스트 회원 데이터 생성
     * @description 매칭 테스트를 위한 남성/여성 회원 데이터를 생성합니다.
     */
    get: operations['createTestMembers'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/matching/cleanup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 수동 매칭 데이터 정리
     * @description 당일 매칭 데이터를 수동으로 정리합니다. 관리자 권한이 필요합니다.
     */
    get: operations['manualCleanup'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/test/auth': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * JWT 인증 테스트
     * @description JWT 토큰이 올바르게 인증되는지 테스트합니다. Bearer 토큰이 필요합니다.
     */
    get: operations['testAuth'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/s3/upload-url': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 이미지 업로드 URL(PreSignedURL) 조회
     * @description 클라이언트가 S3에 직접 이미지를 업로드하기 위한 Presigned URL을 생성합니다.
     */
    get: operations['getUploadUrl'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/raffle/prizes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 상품 목록 전체 조회
     * @description 등록된 상품을 전부 조회합니다.
     */
    get: operations['getPrizes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/raffle/prizes/{days}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 일차별 혹은 프리미엄 상품 조회
     * @description days를 통해 해당 날짜에 맞는 상품들을 정보를 조회합니다.
     */
    get: operations['getPrizeById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/raffle/member': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 회원 응모권 정보 조회
     * @description 로그인한 회원의 응모권 정보를 조회합니다. (응모권 개수, 응모권 사용 내역 등)
     */
    get: operations['getMemberRaffleProfile'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/member/login/kakao': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 사용자 로그인 - 소개팅 소셜로그인
     * @description GET 요청을 받고 kakao 로그인 페이지를 리다이렉트합니다.
     */
    get: operations['redirectLoginKakao'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/matching/result': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 매칭 결과 조회
     * @description 오늘의 매칭 결과를 조회합니다. 매칭 성공 시 내 정보와 파트너 정보를 반환합니다.실패하면 오늘 소개팅 정보가 없다고 나옴
     */
    get: operations['getMatchingResult'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/found-items': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 모든 분실물 조회
     * @description 등록된 모든 분실물의 정보를 조회합니다.
     */
    get: operations['getAllFoundItems'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/found-items/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 분실물 상세 조회
     * @description ID로 등록된 분실물의 상세 정보를 조회합니다.
     */
    get: operations['getFoundItemById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/{boothId}/menus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 부스 ID로 메뉴 조회
     * @description 부스 ID로 특정 부스의 메뉴들을 조회합니다.
     */
    get: operations['getMenusByBoothId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/{boothId}/activities': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 부스 ID로 체험활동 조회
     * @description 부스 ID로 특정 부스의 체험활동들을 조회합니다.
     */
    get: operations['getActivitiesByBoothId'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/performances/{performanceId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 공연 단일 조회
     * @description 공연 ID로 특정 공연의 상세 정보를 조회합니다.
     */
    get: operations['getPerformanceById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/performances/closest': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 공연 시간순 조회
     * @description 현재 시간과 가장 가까운 공연부터 순서대로 조회합니다.
     */
    get: operations['getPerformancesByClosestTime'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/booths/{boothId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 부스 단일 조회
     * @description 부스 ID로 특정 부스 정보를 조회합니다.
     */
    get: operations['getBoothDetail'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/festival/booths/cursor': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 부스 목록 조회 (커서 기반)
     * @description 커서 기반으로 부스를 조회합니다. 첫 요청은 cursor 없이, 이후 요청은 cursor와 size 지정
     */
    get: operations['getBoothsCursor'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/test': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * 관리자 인증 테스트
     * @description 관리자 엑세스 토큰이 올바르게 생성되었는지 테스트를 위한 api
     */
    get: operations['test'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/admin/found-item/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * 분실물 삭제
     * @description 등록된 분실물을 ID로 삭제합니다. 삭제 시 관리자 인증키가 필요합니다.
     */
    delete: operations['deleteFoundItem'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    BaseResponseString: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: string;
    };
    BaseResponseVoid: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: unknown;
    };
    BaseResponseTokenResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['TokenResponse'];
    };
    TokenResponse: {
      accessToken?: string;
      refreshToken?: string;
    };
    PerformanceRequest: {
      title: string;
      artist: string;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      area: string;
      imagePath?: string;
      introduction?: string;
      /** Format: int32 */
      day?: number;
      songs: components['schemas']['SongRequest'][];
      validTimeRange?: boolean;
    };
    SongRequest: {
      singer: string;
      title: string;
    };
    BaseResponseObject: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: unknown;
    };
    BoothRequest: {
      name: string;
      type: string;
      department?: string;
      /** Format: date-time */
      operatingStart: string;
      /** Format: date-time */
      operatingEnd: string;
      location: string;
      info?: string;
      imagePath?: string;
      locationImagePath?: string;
      menus?: components['schemas']['MenuRequest'][];
      validOperatingTime?: boolean;
    };
    MenuRequest: {
      type: string;
      name?: string;
      introduction?: string;
      imagePath?: string;
      /** Format: int32 */
      price?: number;
    };
    AdminLoginRequest: {
      adminId: string;
      authKey: string;
    };
    FoundItemRequest: {
      title: string;
      area: string;
      /** Format: date-time */
      foundDateTime: string;
      imagePath?: string;
    };
    LevelUpRequest: {
      name?: string;
      studentId?: string;
      authenticationKey?: string;
      /** Format: int32 */
      level?: number;
    };
    MatchingApplicantPatchRequest: {
      /** @enum {string} */
      gender?: 'MALE' | 'FEMALE';
      phoneNumber?: string;
      instagramId?: string;
    };
    AuthenticationLevelRequest: {
      /** Format: int32 */
      level?: number;
    };
    BaseResponseUserInfoResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['UserInfoResponse'];
    };
    UserInfoResponse: {
      /** Format: int64 */
      memberId?: number;
      username?: string;
      role?: string;
      authenticated?: boolean;
    };
    BaseResponseListString: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: string[];
    };
    AuthTestResponse: {
      /** Format: int64 */
      memberId?: number;
      username?: string;
      authorities?: string;
      message?: string;
    };
    BaseResponseAuthTestResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['AuthTestResponse'];
    };
    BaseResponseListPrizeResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['PrizeResponse'][];
    };
    PrizeResponse: {
      /** Format: int64 */
      prizeId?: number;
      prizeImagePath?: string;
      prizeName?: string;
    };
    BaseResponseMemberRaffleProfileResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['MemberRaffleProfileResponse'];
    };
    MemberRaffleProfileResponse: {
      /** Format: int32 */
      level?: number;
      name?: string;
      studentId?: string;
    };
    ApplicationContext: {
      parent?: unknown;
      id?: string;
      displayName?: string;
      applicationName?: string;
      /** Format: int64 */
      startupDate?: number;
      autowireCapableBeanFactory?: components['schemas']['AutowireCapableBeanFactory'];
      environment?: components['schemas']['Environment'];
      /** Format: int32 */
      beanDefinitionCount?: number;
      beanDefinitionNames?: string[];
      parentBeanFactory?: components['schemas']['BeanFactory'];
      classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        parent?: {
          name?: string;
          registeredAsParallelCapable?: boolean;
          unnamedModule?: {
            name?: string;
            classLoader?: {
              name?: string;
              registeredAsParallelCapable?: boolean;
              definedPackages?: {
                name?: string;
                annotations?: unknown[];
                declaredAnnotations?: unknown[];
                sealed?: boolean;
                specificationTitle?: string;
                specificationVersion?: string;
                specificationVendor?: string;
                implementationTitle?: string;
                implementationVersion?: string;
                implementationVendor?: string;
              }[];
              defaultAssertionStatus?: boolean;
            };
            descriptor?: {
              open?: boolean;
              automatic?: boolean;
            };
            named?: boolean;
            annotations?: unknown[];
            declaredAnnotations?: unknown[];
            packages?: string[];
            layer?: unknown;
          };
          definedPackages?: {
            name?: string;
            annotations?: unknown[];
            declaredAnnotations?: unknown[];
            sealed?: boolean;
            specificationTitle?: string;
            specificationVersion?: string;
            specificationVendor?: string;
            implementationTitle?: string;
            implementationVersion?: string;
            implementationVendor?: string;
          }[];
          defaultAssertionStatus?: boolean;
        };
        unnamedModule?: {
          name?: string;
          classLoader?: {
            name?: string;
            registeredAsParallelCapable?: boolean;
            definedPackages?: {
              name?: string;
              annotations?: unknown[];
              declaredAnnotations?: unknown[];
              sealed?: boolean;
              specificationTitle?: string;
              specificationVersion?: string;
              specificationVendor?: string;
              implementationTitle?: string;
              implementationVersion?: string;
              implementationVendor?: string;
            }[];
            defaultAssertionStatus?: boolean;
          };
          descriptor?: {
            open?: boolean;
            automatic?: boolean;
          };
          named?: boolean;
          annotations?: unknown[];
          declaredAnnotations?: unknown[];
          packages?: string[];
          layer?: unknown;
        };
        definedPackages?: {
          name?: string;
          annotations?: unknown[];
          declaredAnnotations?: unknown[];
          sealed?: boolean;
          specificationTitle?: string;
          specificationVersion?: string;
          specificationVendor?: string;
          implementationTitle?: string;
          implementationVersion?: string;
          implementationVendor?: string;
        }[];
        defaultAssertionStatus?: boolean;
      };
    };
    AutowireCapableBeanFactory: unknown;
    BeanFactory: unknown;
    DefaultHttpStatusCode: components['schemas']['HttpStatusCode'];
    Environment: {
      activeProfiles?: string[];
      defaultProfiles?: string[];
    };
    FilterRegistration: {
      servletNameMappings?: string[];
      urlPatternMappings?: string[];
      name?: string;
      className?: string;
      initParameters?: {
        [key: string]: string;
      };
    };
    /** @enum {unknown} */
    HttpStatus:
      | '100 CONTINUE'
      | '101 SWITCHING_PROTOCOLS'
      | '102 PROCESSING'
      | '103 EARLY_HINTS'
      | '103 CHECKPOINT'
      | '200 OK'
      | '201 CREATED'
      | '202 ACCEPTED'
      | '203 NON_AUTHORITATIVE_INFORMATION'
      | '204 NO_CONTENT'
      | '205 RESET_CONTENT'
      | '206 PARTIAL_CONTENT'
      | '207 MULTI_STATUS'
      | '208 ALREADY_REPORTED'
      | '226 IM_USED'
      | '300 MULTIPLE_CHOICES'
      | '301 MOVED_PERMANENTLY'
      | '302 FOUND'
      | '302 MOVED_TEMPORARILY'
      | '303 SEE_OTHER'
      | '304 NOT_MODIFIED'
      | '305 USE_PROXY'
      | '307 TEMPORARY_REDIRECT'
      | '308 PERMANENT_REDIRECT'
      | '400 BAD_REQUEST'
      | '401 UNAUTHORIZED'
      | '402 PAYMENT_REQUIRED'
      | '403 FORBIDDEN'
      | '404 NOT_FOUND'
      | '405 METHOD_NOT_ALLOWED'
      | '406 NOT_ACCEPTABLE'
      | '407 PROXY_AUTHENTICATION_REQUIRED'
      | '408 REQUEST_TIMEOUT'
      | '409 CONFLICT'
      | '410 GONE'
      | '411 LENGTH_REQUIRED'
      | '412 PRECONDITION_FAILED'
      | '413 PAYLOAD_TOO_LARGE'
      | '413 REQUEST_ENTITY_TOO_LARGE'
      | '414 URI_TOO_LONG'
      | '414 REQUEST_URI_TOO_LONG'
      | '415 UNSUPPORTED_MEDIA_TYPE'
      | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
      | '417 EXPECTATION_FAILED'
      | '418 I_AM_A_TEAPOT'
      | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
      | '420 METHOD_FAILURE'
      | '421 DESTINATION_LOCKED'
      | '422 UNPROCESSABLE_ENTITY'
      | '423 LOCKED'
      | '424 FAILED_DEPENDENCY'
      | '425 TOO_EARLY'
      | '426 UPGRADE_REQUIRED'
      | '428 PRECONDITION_REQUIRED'
      | '429 TOO_MANY_REQUESTS'
      | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
      | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
      | '500 INTERNAL_SERVER_ERROR'
      | '501 NOT_IMPLEMENTED'
      | '502 BAD_GATEWAY'
      | '503 SERVICE_UNAVAILABLE'
      | '504 GATEWAY_TIMEOUT'
      | '505 HTTP_VERSION_NOT_SUPPORTED'
      | '506 VARIANT_ALSO_NEGOTIATES'
      | '507 INSUFFICIENT_STORAGE'
      | '508 LOOP_DETECTED'
      | '509 BANDWIDTH_LIMIT_EXCEEDED'
      | '510 NOT_EXTENDED'
      | '511 NETWORK_AUTHENTICATION_REQUIRED';
    HttpStatusCode: {
      error?: boolean;
      is4xxClientError?: boolean;
      is5xxServerError?: boolean;
      is1xxInformational?: boolean;
      is2xxSuccessful?: boolean;
      is3xxRedirection?: boolean;
    };
    JspConfigDescriptor: {
      taglibs?: components['schemas']['TaglibDescriptor'][];
      jspPropertyGroups?: components['schemas']['JspPropertyGroupDescriptor'][];
    };
    JspPropertyGroupDescriptor: {
      buffer?: string;
      elIgnored?: string;
      errorOnELNotFound?: string;
      pageEncoding?: string;
      scriptingInvalid?: string;
      isXml?: string;
      includePreludes?: string[];
      includeCodas?: string[];
      deferredSyntaxAllowedAsLiteral?: string;
      trimDirectiveWhitespaces?: string;
      errorOnUndeclaredNamespace?: string;
      urlPatterns?: string[];
      defaultContentType?: string;
    };
    RedirectView: {
      applicationContext?: components['schemas']['ApplicationContext'];
      servletContext?: components['schemas']['ServletContext'];
      contentType?: string;
      requestContextAttribute?: string;
      staticAttributes?: {
        [key: string]: unknown;
      };
      exposePathVariables?: boolean;
      exposeContextBeansAsAttributes?: boolean;
      exposedContextBeanNames?: string[];
      beanName?: string;
      url?: string;
      contextRelative?: boolean;
      http10Compatible?: boolean;
      exposeModelAttributes?: boolean;
      encodingScheme?: string;
      statusCode?:
        | components['schemas']['DefaultHttpStatusCode']
        | components['schemas']['HttpStatus'];
      expandUriTemplateVariables?: boolean;
      propagateQueryParams?: boolean;
      hosts?: string[];
      redirectView?: boolean;
      propagateQueryProperties?: boolean;
      attributesMap?: {
        [key: string]: unknown;
      };
      attributes?: {
        [key: string]: string;
      };
      attributesCSV?: string;
    };
    ServletContext: {
      classLoader?: {
        name?: string;
        registeredAsParallelCapable?: boolean;
        definedPackages?: {
          name?: string;
          annotations?: unknown[];
          declaredAnnotations?: unknown[];
          sealed?: boolean;
          specificationTitle?: string;
          specificationVersion?: string;
          specificationVendor?: string;
          implementationTitle?: string;
          implementationVersion?: string;
          implementationVendor?: string;
        }[];
        defaultAssertionStatus?: boolean;
      };
      /** Format: int32 */
      majorVersion?: number;
      /** Format: int32 */
      minorVersion?: number;
      attributeNames?: unknown;
      sessionTrackingModes?: ('COOKIE' | 'URL' | 'SSL')[];
      /** Format: int32 */
      sessionTimeout?: number;
      contextPath?: string;
      initParameterNames?: unknown;
      servletRegistrations?: {
        [key: string]: components['schemas']['ServletRegistration'];
      };
      /** Format: int32 */
      effectiveMajorVersion?: number;
      /** Format: int32 */
      effectiveMinorVersion?: number;
      serverInfo?: string;
      servletContextName?: string;
      filterRegistrations?: {
        [key: string]: components['schemas']['FilterRegistration'];
      };
      sessionCookieConfig?: components['schemas']['SessionCookieConfig'];
      defaultSessionTrackingModes?: ('COOKIE' | 'URL' | 'SSL')[];
      effectiveSessionTrackingModes?: ('COOKIE' | 'URL' | 'SSL')[];
      jspConfigDescriptor?: components['schemas']['JspConfigDescriptor'];
      virtualServerName?: string;
      requestCharacterEncoding?: string;
      responseCharacterEncoding?: string;
    };
    ServletRegistration: {
      mappings?: string[];
      runAsRole?: string;
      name?: string;
      className?: string;
      initParameters?: {
        [key: string]: string;
      };
    };
    SessionCookieConfig: {
      name?: string;
      path?: string;
      attributes?: {
        [key: string]: string;
      };
      /** @deprecated */
      comment?: string;
      secure?: boolean;
      /** Format: int32 */
      maxAge?: number;
      domain?: string;
      httpOnly?: boolean;
    };
    TaglibDescriptor: {
      taglibURI?: string;
      taglibLocation?: string;
    };
    BaseResponseMatchingResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['MatchingResponse'];
    };
    MatchingResponse: {
      myInfo?: components['schemas']['MemberInfo'];
      partnerInfo?: components['schemas']['MemberInfo'];
      matchingDate?: string;
    };
    MemberInfo: {
      phoneNumber?: string;
      instagramId?: string;
    };
    BaseResponseMatchingApplicantResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['MatchingApplicantResponse'];
    };
    MatchingApplicantResponse: {
      memberName?: string;
      /** Format: int64 */
      memberId?: number;
      /** @enum {string} */
      memberGender?: 'MALE' | 'FEMALE';
      memberPhoneNumber?: string;
      memberInstagramId?: string;
    };
    BaseResponseListFoundItemResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['FoundItemResponse'][];
    };
    FoundItemResponse: {
      /** Format: int64 */
      id?: number;
      title?: string;
      area?: string;
      /** Format: date-time */
      foundDateTime?: string;
      imagePath?: string;
    };
    BaseResponseFoundItemResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['FoundItemResponse'];
    };
    MenuResponse: {
      /** Format: int64 */
      id?: number;
      type?: string;
      name?: string;
      introduction?: string;
      imagePath?: string;
      /** Format: int32 */
      price?: number;
    };
    ActivityResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      introduction?: string;
      imagePath?: string;
      /** Format: int32 */
      price?: number;
    };
    PerformanceDetailResponse: {
      /** Format: int64 */
      id?: number;
      title?: string;
      artist?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      area?: string;
      imagePath?: string;
      introduction?: string;
      /** Format: int32 */
      day?: number;
      songs?: components['schemas']['SongResponse'][];
    };
    SongResponse: {
      singer?: string;
      title?: string;
    };
    PerformanceResponse: {
      /** Format: int64 */
      id?: number;
      title?: string;
      artist?: string;
      /** Format: date-time */
      startTime?: string;
      /** Format: date-time */
      endTime?: string;
      imagePath?: string;
      introduction?: string;
      /** Format: int32 */
      day?: number;
    };
    BoothDetailResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      type?: string;
      department?: string;
      /** Format: date-time */
      operatingStart?: string;
      /** Format: date-time */
      operatingEnd?: string;
      location?: string;
      info?: string;
      imagePath?: string;
      locationImagePath?: string;
      menus?: components['schemas']['MenuResponse'][];
    };
    BoothResponse: {
      /** Format: int64 */
      id?: number;
      name?: string;
      type?: string;
      department?: string;
      /** Format: date-time */
      operatingStart?: string;
      /** Format: date-time */
      operatingEnd?: string;
      location?: string;
      info?: string;
      imagePath?: string;
      locationImagePath?: string;
    };
    BaseResponseMapStringObject: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: {
        [key: string]: unknown;
      };
    };
    BaseResponseWinnerResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['WinnerResponse'];
    };
    WinnerResponse: {
      name?: string;
      studentId?: string;
    };
    AuthenticationKeyResponse: {
      authenticationKey?: string;
    };
    BaseResponseAuthenticationKeyResponse: {
      isSuccess?: boolean;
      /** Format: int32 */
      code?: number;
      message?: string;
      result?: components['schemas']['AuthenticationKeyResponse'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  applyAllTestMembers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  applyMatching: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  getProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseMatchingApplicantResponse'];
        };
      };
    };
  };
  createProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  patchProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 추가 입력 정보 */
    requestBody: {
      content: {
        'application/json': components['schemas']['MatchingApplicantPatchRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  refreshToken: {
    parameters: {
      query?: never;
      header: {
        /**
         * @description Bearer {refreshToken} 형식의 리프레시 토큰
         * @example Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
         */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseTokenResponse'];
        };
      };
    };
  };
  insertPerformances: {
    parameters: {
      query?: never;
      header: {
        'X-ADMIN-KEY': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PerformanceRequest'][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseObject'];
        };
      };
    };
  };
  insertBooths: {
    parameters: {
      query?: never;
      header: {
        'X-ADMIN-KEY': string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['BoothRequest'][];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  getRaffleWinnersByDay: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        day: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseWinnerResponse'];
        };
      };
    };
  };
  executeRaffleByDay: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        day: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  getRaffleWinnerOfPremium: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseWinnerResponse'];
        };
      };
    };
  };
  executeRaffleOfPremium: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 관리자 로그인 요청 정보 */
    requestBody: {
      content: {
        'application/json': components['schemas']['AdminLoginRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseTokenResponse'];
        };
      };
    };
  };
  createFoundItem: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 분실물 등록 요청 정보 */
    requestBody: {
      content: {
        'application/json': components['schemas']['FoundItemRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  levelUp: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['LevelUpRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  getAuthenticationKey: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseAuthenticationKeyResponse'];
        };
      };
    };
  };
  setAuthenticationKeyLevel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['AuthenticationLevelRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
  issueTestToken: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        memberId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  testPublicAccess: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  getCurrentUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseUserInfoResponse'];
        };
      };
    };
  };
  getTestMembers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseListString'];
        };
      };
    };
  };
  manualMatching: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  createTestMembers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  manualCleanup: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  testAuth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseAuthTestResponse'];
        };
      };
    };
  };
  getUploadUrl: {
    parameters: {
      query: {
        /**
         * @description 업로드할 이미지 파일명 (확장자 포함)
         * @example lost-wallet.jpg
         */
        fileName: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseString'];
        };
      };
    };
  };
  getPrizes: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseListPrizeResponse'];
        };
      };
    };
  };
  getPrizeById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 상품의 날짜 / 프리미엄의 경우 4
         * @example 1
         */
        days: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseListPrizeResponse'];
        };
      };
    };
  };
  getMemberRaffleProfile: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseMemberRaffleProfileResponse'];
        };
      };
    };
  };
  redirectLoginKakao: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['RedirectView'];
        };
      };
    };
  };
  getMatchingResult: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseMatchingResponse'];
        };
      };
    };
  };
  getAllFoundItems: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseListFoundItemResponse'];
        };
      };
    };
  };
  getFoundItemById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 분실물의 ID
         * @example 1
         */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseFoundItemResponse'];
        };
      };
    };
  };
  getMenusByBoothId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 부스의 ID
         * @example 1
         */
        boothId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 부스 메뉴 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['MenuResponse'][];
        };
      };
    };
  };
  getActivitiesByBoothId: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 부스의 ID
         * @example 1
         */
        boothId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 부스 체험활동 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ActivityResponse'][];
        };
      };
    };
  };
  getPerformanceById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 공연 ID
         * @example 1
         */
        performanceId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 공연 단일 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PerformanceDetailResponse'];
        };
      };
    };
  };
  getPerformancesByClosestTime: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 공연 시간순 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['PerformanceResponse'][];
        };
      };
    };
  };
  getBoothDetail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 조회할 부스의 ID
         * @example 1
         */
        boothId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 부스 단일 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BoothDetailResponse'];
        };
      };
    };
  };
  getBoothsCursor: {
    parameters: {
      query?: {
        /**
         * @description 마지막으로 조회한 부스 ID (없으면 첫 페이지)
         * @example 6
         */
        cursor?: number;
        /**
         * @description 한 페이지 크기
         * @example 5
         */
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 커서 기반 부스 목록 조회 성공 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['BoothResponse'][];
        };
      };
    };
  };
  test: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseMapStringObject'];
        };
      };
    };
  };
  deleteFoundItem: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /**
         * @description 삭제할 분실물의 ID
         * @example 1
         */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          '*/*': components['schemas']['BaseResponseVoid'];
        };
      };
    };
  };
}
